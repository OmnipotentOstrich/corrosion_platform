# Generated by Django 4.2.7 on 2025-10-22 12:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('enterprise', '企业用户'), ('personal', '个人用户')], default='personal', max_length=20, verbose_name='用户类型')),
                ('phone', models.CharField(max_length=11, unique=True, verbose_name='手机号')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='头像')),
                ('is_verified', models.BooleanField(default=False, verbose_name='是否认证')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='菜单名称')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='菜单代码')),
                ('url', models.CharField(blank=True, max_length=200, verbose_name='菜单URL')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='菜单图标')),
                ('menu_type', models.CharField(choices=[('page', '页面'), ('module', '模块'), ('function', '功能'), ('api', 'API'), ('other', '其他')], default='page', max_length=20, verbose_name='菜单类型')),
                ('sort_order', models.IntegerField(default=0, verbose_name='排序')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('is_visible', models.BooleanField(default=True, verbose_name='是否可见')),
                ('requires_permission', models.BooleanField(default=True, verbose_name='需要权限')),
                ('description', models.TextField(blank=True, verbose_name='菜单描述')),
                ('component_path', models.CharField(blank=True, max_length=200, verbose_name='组件路径')),
                ('meta_data', models.JSONField(blank=True, null=True, verbose_name='元数据')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.menu', verbose_name='父菜单')),
            ],
            options={
                'verbose_name': '菜单',
                'verbose_name_plural': '菜单',
                'db_table': 'menus',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='权限名称')),
                ('code', models.CharField(max_length=100, unique=True, verbose_name='权限代码')),
                ('description', models.TextField(blank=True, verbose_name='权限描述')),
                ('module', models.CharField(max_length=50, verbose_name='所属模块')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '权限',
                'verbose_name_plural': '权限',
                'db_table': 'permissions',
            },
        ),
        migrations.CreateModel(
            name='PermissionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='权限组名称')),
                ('code', models.CharField(max_length=100, unique=True, verbose_name='权限组代码')),
                ('description', models.TextField(blank=True, verbose_name='权限组描述')),
                ('module', models.CharField(max_length=50, verbose_name='所属模块')),
                ('sort_order', models.IntegerField(default=0, verbose_name='排序')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '权限组',
                'verbose_name_plural': '权限组',
                'db_table': 'permission_groups',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='角色名称')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='角色代码')),
                ('description', models.TextField(blank=True, verbose_name='角色描述')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '角色',
                'verbose_name_plural': '角色',
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=100, unique=True, verbose_name='会话密钥')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('user_agent', models.TextField(verbose_name='用户代理')),
                ('login_time', models.DateTimeField(auto_now_add=True, verbose_name='登录时间')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='最后活动时间')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否活跃')),
                ('expire_at', models.DateTimeField(verbose_name='过期时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户会话',
                'verbose_name_plural': '用户会话',
                'db_table': 'user_sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('real_name', models.CharField(blank=True, max_length=50, verbose_name='真实姓名')),
                ('id_card', models.CharField(blank=True, max_length=18, verbose_name='身份证号')),
                ('gender', models.CharField(blank=True, choices=[('male', '男'), ('female', '女')], max_length=10, verbose_name='性别')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('address', models.TextField(blank=True, verbose_name='地址')),
                ('company', models.CharField(blank=True, max_length=200, verbose_name='公司')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='职位')),
                ('bio', models.TextField(blank=True, verbose_name='个人简介')),
                ('website', models.URLField(blank=True, verbose_name='个人网站')),
                ('social_media', models.JSONField(blank=True, null=True, verbose_name='社交媒体')),
                ('preferences', models.JSONField(blank=True, null=True, verbose_name='偏好设置')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户资料',
                'verbose_name_plural': '用户资料',
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserLoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('user_agent', models.TextField(verbose_name='用户代理')),
                ('login_time', models.DateTimeField(auto_now_add=True, verbose_name='登录时间')),
                ('logout_time', models.DateTimeField(blank=True, null=True, verbose_name='登出时间')),
                ('is_success', models.BooleanField(default=True, verbose_name='是否成功')),
                ('failure_reason', models.CharField(blank=True, max_length=200, verbose_name='失败原因')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='登录地点')),
                ('device_type', models.CharField(blank=True, max_length=50, verbose_name='设备类型')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户登录日志',
                'verbose_name_plural': '用户登录日志',
                'db_table': 'user_login_logs',
                'ordering': ['-login_time'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.role', verbose_name='角色')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户角色',
                'verbose_name_plural': '用户角色',
                'db_table': 'user_roles',
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='UserPermissionOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_granted', models.BooleanField(default=True, verbose_name='是否授予')),
                ('reason', models.TextField(verbose_name='原因')),
                ('expire_at', models.DateTimeField(blank=True, null=True, verbose_name='过期时间')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('granted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_overrides', to=settings.AUTH_USER_MODEL, verbose_name='授予人')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.permission', verbose_name='权限')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户权限覆盖',
                'verbose_name_plural': '用户权限覆盖',
                'db_table': 'user_permission_overrides',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'permission')},
            },
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('login', '登录'), ('logout', '登出'), ('register', '注册'), ('update_profile', '更新资料'), ('change_password', '修改密码'), ('view_page', '浏览页面'), ('create_post', '发布信息'), ('update_post', '更新信息'), ('delete_post', '删除信息'), ('upload_file', '上传文件'), ('download_file', '下载文件'), ('search', '搜索'), ('other', '其他')], max_length=50, verbose_name='操作类型')),
                ('description', models.CharField(max_length=200, verbose_name='操作描述')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('user_agent', models.TextField(verbose_name='用户代理')),
                ('request_path', models.CharField(blank=True, max_length=500, verbose_name='请求路径')),
                ('extra_data', models.JSONField(blank=True, null=True, verbose_name='额外数据')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户活动日志',
                'verbose_name_plural': '用户活动日志',
                'db_table': 'user_activity_logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'created_at'], name='user_activi_user_id_98e74d_idx'), models.Index(fields=['action', 'created_at'], name='user_activi_action_3307ff_idx')],
            },
        ),
        migrations.CreateModel(
            name='RolePermissionAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('grant', '授予权限'), ('revoke', '撤销权限'), ('create_role', '创建角色'), ('update_role', '更新角色'), ('delete_role', '删除角色'), ('assign_role', '分配角色'), ('remove_role', '移除角色')], max_length=20, verbose_name='操作类型')),
                ('description', models.TextField(verbose_name='操作描述')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('user_agent', models.TextField(verbose_name='用户代理')),
                ('extra_data', models.JSONField(blank=True, null=True, verbose_name='额外数据')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('permission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.permission', verbose_name='权限')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.role', verbose_name='角色')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='操作用户')),
            ],
            options={
                'verbose_name': '角色权限审计',
                'verbose_name_plural': '角色权限审计',
                'db_table': 'role_permission_audits',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['role', 'created_at'], name='role_permis_role_id_c42134_idx'), models.Index(fields=['user', 'created_at'], name='role_permis_user_id_d5b8d1_idx'), models.Index(fields=['action', 'created_at'], name='role_permis_action_306353_idx')],
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.permission', verbose_name='权限')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.role', verbose_name='角色')),
            ],
            options={
                'verbose_name': '角色权限',
                'verbose_name_plural': '角色权限',
                'db_table': 'role_permissions',
                'unique_together': {('role', 'permission')},
            },
        ),
        migrations.CreateModel(
            name='RoleMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_view', models.BooleanField(default=True, verbose_name='可查看')),
                ('can_create', models.BooleanField(default=False, verbose_name='可创建')),
                ('can_update', models.BooleanField(default=False, verbose_name='可更新')),
                ('can_delete', models.BooleanField(default=False, verbose_name='可删除')),
                ('can_export', models.BooleanField(default=False, verbose_name='可导出')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.menu', verbose_name='菜单')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.role', verbose_name='角色')),
            ],
            options={
                'verbose_name': '角色菜单',
                'verbose_name_plural': '角色菜单',
                'db_table': 'role_menus',
                'unique_together': {('role', 'menu')},
            },
        ),
    ]
